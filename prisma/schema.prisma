generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           Int      @id @default(autoincrement())
  email        String
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  refreshToken String?
}

model Link {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  desc      String
  icon      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  file      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Post {
  id           Int        @id @default(autoincrement())
  title        String
  content      String
  images       Image[]
  subsectionId Int
  subsection   SubSection @relation(fields: [subsectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}

model Section {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  subsections SubSection[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model SubSection {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  sectionId   Int
  thumbnail   String?
  section     Section  @relation(fields: [sectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId    Int
}
